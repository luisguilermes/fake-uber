include:
    - docker-compose.local.yaml
services:
    prometheus:
        image: prom/prometheus:v3.2.0
        container_name: prometheus
        volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus_data:/prometheus
        ports:
            - "9090:9090"
        restart: unless-stopped

    grafana:
      image: grafana/grafana:11.6.0
      container_name: grafana
      ports:
        - "3000:3000"
      volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
        - ./grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
        - ./grafana/provisioning/dashboards:/var/lib/grafana/dashboards
      environment:
        - GF_SECURITY_ADMIN_PASSWORD=admin
      depends_on:
        - prometheus
      restart: unless-stopped

    fu-business-service:
        build:
          context: ../
          dockerfile: service-business.Dockerfile
        container_name: fu-business-service
        deploy:
          resources:
            limits:
              cpus: "1.0"  # Limita a 1.0 CPUs
              memory: "512M"  # Limita a 512MB de RAM
            reservations:
              cpus: "0.5"  # Reserva 0.5 CPU para o container
              memory: "256M"  # Reserva 256MB de RAM
        environment:
          SPRING_PROFILES_ACTIVE: dev
          SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/business_db
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        depends_on:
          - postgres
        ports:
          - "8080-8081:8080-8081"
        command: ["./wait-for-it.sh", "postgres:5432", "--", "java", "-jar", "/app.jar"]
        healthcheck:
          test: [ "CMD", "curl", "-f", "http://localhost:8081/health/liveness" ]
          interval: 30s
          timeout: 5s
          retries: 3
          start_period: 10s
        volumes:
        - ./wait-for-it.sh:/wait-for-it.sh

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
